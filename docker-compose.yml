version: "2"

networks:
  main:
    driver: bridge
  back:
    driver: bridge
services:
  nginx:
    restart: always
    image: nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/etc/nginx/conf.d"
      - "/etc/nginx/vhost.d"
      - "/usr/share/nginx/html"
      - "./volumes/proxy/certs:/etc/nginx/certs:ro"
    networks:
      - main

  nginx-gen:
    restart: always
    image: jwilder/docker-gen
    container_name: nginx-gen
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "./volumes/proxy/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro"
    volumes_from:
      - nginx
    entrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    networks:
      - main

  letsencrypt-nginx-proxy-companion:
    restart: always
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt-nginx-proxy-companion
    volumes_from:
      - nginx
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./volumes/proxy/certs:/etc/nginx/certs:rw"
    environment:
      - NGINX_DOCKER_GEN_CONTAINER=nginx-gen
    networks:
      - main

  piwik:
    restart: always
    image: ${IMAGE1}
    container_name: ${APP1}
    environment:
      - VIRTUAL_HOST=${HOST1}
      - VIRTUAL_NETWORK=nginx-proxy
      - VIRTUAL_PORT=${PORT1}
      - LETSENCRYPT_HOST=${HOST1}
      - LETSENCRYPT_EMAIL=${EMAIL}
    links: 
      - ${APP2}
    depends_on:
      - db
    networks:
      - main
      - back
  db:
    restart: always
    image: ${IMAGE2}
    container_name: ${APP2}
    environment:
      - MYSQL_ROOT_PASSWORD
    networks:
      - back
